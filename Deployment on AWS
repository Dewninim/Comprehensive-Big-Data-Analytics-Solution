# Jupyter Notebook Deployment on AWS EC2

## **1. Launch an AWS EC2 Instance**

### **Why?**
We need an EC2 instance to **host Jupyter Notebook** so that we can access and run Python code remotely.

### **Steps:**
- **Go to AWS EC2 Console** → Navigate to the [EC2 Dashboard](https://console.aws.amazon.com/ec2).
- **Click "Launch Instance"** → This starts the process of creating a new virtual machine.
- **Choose an AMI (Amazon Machine Image):** Select **Ubuntu 22.04 LTS (Free Tier Eligible)**.
- **Choose an Instance Type:** Select **t2.micro** (Free Tier) since it provides sufficient resources for Jupyter.
- **Create a Key Pair:**
  - Key Name: `healthcare`
  - Format: `.pem`
  - Click **Create & Download** (Needed for SSH access).
- **Configure Security Group:**
  - **Allow SSH (22):** Your IP
  - **Allow Custom TCP (8888):** Anywhere (0.0.0.0/0) (To access Jupyter remotely)
- **Launch the Instance** and wait until it is running.

---

## **2. Connect to EC2 via SSH**

### **Why?**
SSH (**Secure Shell**) allows us to **securely access and control** our EC2 instance from our local machine.

### **Steps:**
- Move the Key Pair to a Secure Location:
  ```sh
  mv ~/Downloads/healthcare.pem ~/.ssh/
  chmod 400 ~/.ssh/healthcare.pem
  ```
- Connect to EC2:
  ```sh
  ssh -i "~/.ssh/healthcare.pem" ubuntu@<your-ec2-public-ip>
  ```
  - Replace `<your-ec2-public-ip>` with the instance’s **public IPv4 address**.

---

## **3. Install Jupyter Notebook**

### **Why?**
Jupyter Notebook allows us to **run Python code interactively**.

### **Steps:**
```sh
sudo apt update -y
sudo apt install python3-pip -y
pip3 install jupyter
```

---

## **4. Upload `healthcare.ipynb` to EC2**

### **Why?**
This file contains our **dataset and code**, which we need to analyze.

### **Steps:**
```sh
scp -i "~/.ssh/healthcare.pem" healthcare.ipynb ubuntu@<your-ec2-public-ip>:/home/ubuntu/
```

---

## **5. Configure Jupyter for Remote Access**

### **Why?**
By default, Jupyter only allows access from `localhost`. We configure it to be accessible remotely.

### **Steps:**
```sh
jupyter notebook --generate-config
echo "c.NotebookApp.ip = '0.0.0.0'" >> ~/.jupyter/jupyter_notebook_config.py
```

---

## **6. Start Jupyter Notebook**

### **Why?**
This launches Jupyter, making it accessible from a browser.

### **Steps:**
```sh
jupyter notebook --port=8888 --no-browser --allow-root
```
- Open in your browser:
  ```
  http://<your-ec2-public-ip>:8888/tree
  ```
- Use the **token** shown in the terminal to log in.
- For JupyterLab:
  ```
  http://<your-ec2-public-ip>:8888/lab
  ```

---

## **7. Keep Jupyter Running After Logout**

### **Why?**
Jupyter stops running when you close the terminal. Using `screen`, we can keep it running in the background.

### **Steps:**
- Install & Use `screen`:
  ```sh
  sudo apt install screen -y
  screen -S jupyter
  jupyter notebook --port=8888 --no-browser --allow-root
  ```
- Detach `screen` (keeps Jupyter running):
  - Press `Ctrl + A`, then `D`.
- To resume:
  ```sh
  screen -r jupyter
  ```
- Auto-Start Jupyter on Reboot:
  ```sh
  crontab -e
  ```
  Add:
  ```sh
  @reboot screen -dmS jupyter jupyter notebook --port=8888 --no-browser --allow-root
  ```

---

## **8. Secure Jupyter Notebook (Optional)**

### **Why?**
By default, Jupyter uses a token for authentication. Setting a password improves security.

### **Steps:**
```sh
jupyter notebook password
```
- Restart Jupyter:
  ```sh
  jupyter notebook --port=8888 --no-browser --allow-root
  ```
- Now, Jupyter will ask for a **password** instead of a token.

---


